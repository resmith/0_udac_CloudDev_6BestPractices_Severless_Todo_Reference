import { CustomAuthorizerEvent, CustomAuthorizerResult } from 'aws-lambda'
import 'source-map-support/register'

import { verify, decode } from 'jsonwebtoken'
// import Axios from 'axios'
import { Jwt } from '../../auth/Jwt'
import { JwtPayload } from '../../auth/JwtPayload'
import { createLogger } from '../../utils/logger'
import { ms } from 'ms'


// import { jwksClient } from 'jwks-rsa';
const jwksClient = require('jwks-rsa');
// JWT token signature from Auth0 page -> Endpoints -> JSON Web Key Set
const jwksUrl = 'https://dev-52n9d49z.us.auth0.com/.well-known/jwks.json'

const logger = createLogger('auth0Authorizer')


export const handler = async (
  event: CustomAuthorizerEvent
): Promise<CustomAuthorizerResult> => {
  logger.info('handler ', event.authorizationToken)
  try {

    // const jwtToken = await verifyToken(event.authorizationToken,jwksUrl )
    verifyToken(event.authorizationToken,jwksUrl )
    // logger.info('handler', jwtToken)

    return {
      principalId: 'user',      
      // principalId: jwtToken.sub,
      policyDocument: {
        Version: '2012-10-17',
        Statement: [
          {
            Action: 'execute-api:Invoke',
            Effect: 'Allow',
            Resource: '*'
          }
        ]
      }
    }
  } catch (e) {
    logger.error('User not authorized', { error: e.message })

    return {
      principalId: 'user',
      policyDocument: {
        Version: '2012-10-17',
        Statement: [
          {
            Action: 'execute-api:Invoke',
            Effect: 'Deny',
            Resource: '*'
          }
        ]
      }
    }
  }
}

async function verifyToken(authHeader: string, jwksUrl: string): Promise<JwtPayload> {
  logger.info("verifyToken", { authHeader } );

  const token = getToken(authHeader)
  logger.info("verifyToken", { token });

  const jwt: Jwt = decode(token, { complete: true }) as Jwt
  logger.info("verifyToken decoded token", { jwt } );

  if (jwt.header.alg !== 'RS256') {
    throw new Error('verifyToken header.alg not RS256')
  }

  const jwtHeaderKid = jwt.header.kid
  logger.info("verifyToken JWT kid", {jwtHeaderKid})

  const signingKey: string = getSigningKey(jwksUrl, jwtHeaderKid)

  const jwtPayload: JwtPayload = verify(token, signingKey) as JwtPayload;

  return jwtPayload    

}

function getToken(authHeader: string): string {
  logger.info("getToken", { authHeader });

  if (!authHeader) {
    logger.info("No authentication header ", {authHeader})
    throw new Error('getToken No authentication header')
  }

  if (!authHeader.toLowerCase().startsWith('bearer ')){ 
    logger.info("getToken invalid autheader in bearer ", {authHeader})
    throw new Error('getToken Invalid authentication header')
  }

  const split = authHeader.split(' ')
  const token = split[1]

  return token
}


function getSigningKey(jwksUri: string, kid: string): string {
  let signingKey: string;
  logger.info("getSigningKey ", { jwksUri })
  logger.info("getSigningKey ", { kid })

  const client = jwksClient({
    jwksUri: jwksUri,
    requestHeaders: {}, // Optional
    requestAgentOptions: {}, // Optional
    timeout: 30000, // Defaults to 30s
    cache: true,
    cacheMaxEntries: 5, // Default value
    cacheMaxAge: ms('10h'), // Default value    
    rateLimit: true,
    jwksRequestsPerMinute: 10, // Default value
  });
  

  client.getSigningKey(kid, (err, key) => {
    if (!err) {
      signingKey = key.publicKey;
      logger.info("getSigningKey ", { key })
      logger.info("getSigningKey ", { signingKey })
    } else 
    {
      logger.info("getSigningKey ", { err })
    }
  });

  logger.info("getSigningKey ", { signingKey })

  // try {
  //   signingKey = client.getSigningKey(kid);
  //   logger.info("getSigningKey ", { signingKey })
  // } catch (err)  {
  //   logger.info("error getting signingKey: ", err)
  // }


 
  return signingKey
}
